/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { StoreNodeType } from "./../graph/storeNode"
import type { ProductNodeType } from "./../graph/productNode"
import type { ProductVariantNodeType } from "./../graph/productVariantNode"
import type { VendorNodeType } from "./../graph/vendorNode"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Mutation: {};
  Product: ProductNodeType;
  ProductVariant: ProductVariantNodeType;
  Query: {};
  Store: StoreNodeType;
  Vendor: VendorNodeType;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createProductVariant: NexusGenRootTypes['ProductVariant'] | null; // ProductVariant
    deleteProductVariant: boolean | null; // Boolean
    unarchiveProduct: boolean | null; // Boolean
    updateProductVariant: NexusGenRootTypes['ProductVariant'] | null; // ProductVariant
  }
  Product: { // field return type
    description: string; // String!
    id: string; // String!
    imageURI: string | null; // String
    name: string; // String!
    status: string; // String!
    store: NexusGenRootTypes['Store']; // Store!
    variants: NexusGenRootTypes['ProductVariant'][] | null; // [ProductVariant!]
    vendor: NexusGenRootTypes['Vendor']; // Vendor!
  }
  ProductVariant: { // field return type
    cost: string | null; // String
    displayName: string; // String!
    id: string; // String!
    isDefault: boolean; // Boolean!
    name: string; // String!
    price: string; // String!
    product: NexusGenRootTypes['Product']; // Product!
    quantity: number; // Int!
    size: string | null; // String
  }
  Query: { // field return type
    product: NexusGenRootTypes['Product']; // Product!
    productVariant: NexusGenRootTypes['ProductVariant']; // ProductVariant!
    store: NexusGenRootTypes['Store']; // Store!
    vendor: NexusGenRootTypes['Vendor']; // Vendor!
  }
  Store: { // field return type
    id: string; // String!
    name: string; // String!
    vendors: NexusGenRootTypes['Vendor'][] | null; // [Vendor!]
  }
  Vendor: { // field return type
    id: string; // String!
    name: string; // String!
    products: NexusGenRootTypes['Product'][] | null; // [Product!]
    store: NexusGenRootTypes['Store']; // Store!
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createProductVariant: 'ProductVariant'
    deleteProductVariant: 'Boolean'
    unarchiveProduct: 'Boolean'
    updateProductVariant: 'ProductVariant'
  }
  Product: { // field return type name
    description: 'String'
    id: 'String'
    imageURI: 'String'
    name: 'String'
    status: 'String'
    store: 'Store'
    variants: 'ProductVariant'
    vendor: 'Vendor'
  }
  ProductVariant: { // field return type name
    cost: 'String'
    displayName: 'String'
    id: 'String'
    isDefault: 'Boolean'
    name: 'String'
    price: 'String'
    product: 'Product'
    quantity: 'Int'
    size: 'String'
  }
  Query: { // field return type name
    product: 'Product'
    productVariant: 'ProductVariant'
    store: 'Store'
    vendor: 'Vendor'
  }
  Store: { // field return type name
    id: 'String'
    name: 'String'
    vendors: 'Vendor'
  }
  Vendor: { // field return type name
    id: 'String'
    name: 'String'
    products: 'Product'
    store: 'Store'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createProductVariant: { // args
      cost: string; // String!
      price: string; // String!
      productDescription: string; // String!
      productImageData?: string | null; // String
      productName: string; // String!
      quantity: number; // Int!
      size: string; // String!
      vendorID: string; // String!
    }
    deleteProductVariant: { // args
      id: string; // String!
      productID: string; // String!
    }
    unarchiveProduct: { // args
      id: string; // String!
    }
    updateProductVariant: { // args
      cost?: string | null; // String
      id: string; // String!
      price?: string | null; // String
      productDescription?: string | null; // String
      productImageData?: string | null; // String
      productName?: string | null; // String
      quantity?: number | null; // Int
      size?: string | null; // String
    }
  }
  Query: {
    product: { // args
      id: string; // String!
    }
    productVariant: { // args
      id: string; // String!
    }
    store: { // args
      id: string; // String!
    }
    vendor: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}